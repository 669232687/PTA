#include <iostream>
#include <algorithm>
using namespace std;
void insert_sort(int *a,int k){ //插入排序
   int j,temp=a[k];
   for (j=k-1;j>=0;j--){
      if (a[j]>temp)
         a[j+1]=a[j];
      else 
        break;
   }
   a[j+1]=temp;
}
void merge(int *a,int k,int len){  // 一遍合并排序,k为步长
   if (k>len)
       k=len;
   for(int i=0;i<len/k;i++)   //每个步长区间分别排序
      sort(a+i*k,a+(i+1)*k);
   for (int i=k*(len/k);i<len;){ //剩余区间排序，排序一次即可，没有剩余区间不排
      sort(a+i,a+len);
      break;
   }
      
}
bool compare(int *a,int *b,int len){
   
   for (int i=0;i<len;i++){
      if (a[i]!=b[i])
         return false;
   }
   return true;

}

int main()
{
   int N;
   cin >>N;
   int* a=new int[N];//未排序序列
   int* target=new int[N];//迭代结果序列
   int* b=new int[N];//未排序序列备份 
   for (int i=0;i<N;i++)
       cin>>a[i];
   for(int i=0;i<N;i++)
      cin>>target[i];
   for (int i=0;i<N;i++)
         b[i]=a[i];
   for (int i =1;i<N;i++){ //判断是否为插入排序
      insert_sort(a,i);
      if (compare(a,target,N)){
         cout<<"Insertion Sort"<<endl;
         insert_sort(a,i+1);
         cout<<a[0];
         for (int i=1;i<N;i++)
         cout<<" "<<a[i];
         system("pause");
         return 0;
        
      }   
   }

   for(int i=2;i<N;i*=2){ //不是插入排序则判断归并排序
      merge(b,i,N);
     if (compare(b,target,N)){
        cout<<"Merge Sort"<<endl;
        merge(b,i*2,N);
        cout<<b[0];
        for (int i=1;i<N;i++)
            cout<<" "<<b[i];
      system("pause");
      return 0;
     }
   }  
}
//方法2
#include<iostream>  
#include<algorithm>  
using namespace std;  
int main()  
{  
        int N;  
        int A1[101], A2[101];  // 原始序列A1  中间序列A2  
        int i, j;  
        cin>>N;  
        for( i=0; i<N; i++ )    cin>>A1[i];  
        for( i=0; i<N; i++ )    cin>>A2[i];  
  
        for( i=0; A2[i]<=A2[i+1] && i<N-1; i++ ) ; // i作为有序序列最后一个元素下标退出循环  
        for( j=++i; A1[j]==A2[j] && j<N; j++  ) ;    // A1 A2从 第一个无序的元素开始 逐一比对  
  
        if( j==N ){// 前半部分有序而后半部分未改动可以确定是插入排序  
            cout<<"Insertion Sort"<<endl;  
            sort( A1, A1+i+1 );  
        }  
        else{  
            cout<<"Merge Sort"<<endl;  
            int k = 1;  
            int flag=1;         //用来标记是否归并到 “中间序列”  
            while( flag )  
            {  
                    flag = 0;  
                    for( i=0; i<N; i++ )  
                        if( A1[i]!=A2[i] )  
                            flag = 1;  
                    k*=2;  
                    for( i=0; i<N/k; i++ )  
                        sort( A1+i*k, A1+(i+1)*k );  
                    for( i=k*(N/k); i<N; i++ ) // 对 非偶数序列的“尾巴”进行排序  
                        sort( A1+k*(N/k), A1+N );  
            }  
        }  
        cout<<A1[0];  
        for( i=1; i<N; i++ )  
            cout<<" "<<A1[i];  
        cout<<endl;  
  
        return 0;  
}  
